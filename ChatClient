package chat.client;
	
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Scanner;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class ChatClient {
	
	public static void main(String[] args) {

		Socket infoSocket = null;
		Socket chatSocket = null;
		String IP = "localhost";
		int infoServerPort = 4000;
		BufferedReader in = null;
		BufferedWriter out = null;
		Scanner input = null;
		String rNumber = null;
		String nName   = null;
		
		try {
			System.out.println("== ChatClient1 START ==");
			infoSocket = new Socket();
			infoSocket.connect(new InetSocketAddress(IP, infoServerPort));

			in = new BufferedReader(new InputStreamReader(infoSocket.getInputStream()));
			out = new BufferedWriter(new OutputStreamWriter(infoSocket.getOutputStream()));

			out.write("port_list");
			out.write("\n");
			out.flush();
			
			String temp;
			if((temp = in.readLine() ) != null){
				System.out.println(temp);
			}
			
			if(!infoSocket.isClosed())infoSocket.close();
			if(out != null)out.close();
			if(in != null)in.close();
			
			input= new Scanner(System.in);
			
			while(true) {
				//방번호 입력
				System.out.println("방번호 입력>>");
				rNumber = input.nextLine();
				
				//방번호 유효성 확인 하기 
				
				// 파싱 객체 생성, 파싱할 내용은 서버에서 받은 temp내용(InputStreamReader)
				// 오브젝트로 바꿔서 배열로 다시 변환(생성 역순으로 풀어야함)
				JSONParser jsonParser = new JSONParser();
				JSONObject jsonObject = (JSONObject) jsonParser.parse(temp);
				JSONArray jsonArray = (JSONArray) jsonObject.get("port_list");
				
				while(!jsonArray.contains(rNumber)) {
					System.out.println("입력하신 방번호는 유효하지 않습니다");
					System.out.print("방번호 입력>>");
					rNumber = input.nextLine();
				}
				
				//닉네임 입력
				System.out.println("닉네임 입력>>");
				nName = input.nextLine();
				if(rNumber.isEmpty() == false && nName.isEmpty() == false) {
					break;
				}
			}
			
			System.out.println("방번호 입력: "+rNumber+" 입니다.");
			System.out.println("닉네임 입력: "+nName  +" 입니다.");
			
			chatSocket = new Socket();
			chatSocket.connect(new InetSocketAddress(IP, Integer.parseInt(rNumber)));
			
			out = new BufferedWriter(new OutputStreamWriter(chatSocket.getOutputStream()));
			in = new BufferedReader(new InputStreamReader(chatSocket.getInputStream()));
			
			if((temp = in.readLine() ) != null){
				System.out.println(temp);
			}
			
			Output output = new Output(chatSocket,nName);
            output.start();
			
			String readValue;
			
			while((readValue = in.readLine()) != null ) {
				System.out.println(readValue);
			}
		} catch (ConnectException e) {
			System.out.println(e);
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try {
				if(input != null)input.close();
				if(out != null)out.close();
				if(in != null)in.close();
				if(!infoSocket.isClosed())infoSocket.close();
				if(!chatSocket.isClosed())chatSocket.close();
			}catch (IOException e) {
			}
			System.out.println("== ChatClient1 END ==");
			System.exit(0);
		}
	}
}

class Output extends Thread{
	BufferedReader in;
	PrintWriter out;
	Socket socket;
	String name;
	
	Output(Socket socket,String name){
        this.socket=socket;
        this.name = name;

        try {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())));
        } catch (IOException e) {
            System.out.println("aa");
            Output.interrupted();
        }
    }
	
    public void run() {
        String data;
        Boolean end = false; // 거짓으로 주어서 특정 값을 받으면 빠져나오게 한다

        while(true) {
            try {
                //키보드로부터 입력
                data = in.readLine();
                
                // 여기서 지정해주지 않으면 data 값이 바뀌므로 x
                if(data.equalsIgnoreCase("q")) {
                	end = true;
                	data = name + "님이 나갔습니다"; // send to server 
                }
                                
                data = '['+name+']'+data;
                out.println(data);//서버로 데이터 전송
                out.flush();
                
                if(end || socket.isClosed()){ // boolean 또는 socket close인 경우
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        // 본인에게 보이는 메세지
        System.out.println("서버와 연결 종료 Output 쓰레드 종료");
        try {
            in.close();
            out.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
