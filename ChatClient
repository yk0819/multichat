import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;

import org.json.JSONArray;

public class ChatClient {
	
	public static void main(String[] args) throws ParseException {

		Socket infoSocket = null;
		Socket chatSocket = null;
		String IP = "localhost";
		int infoServerPort = 4000;
		BufferedReader in = null;
		BufferedWriter out = null;
		Scanner input = null;
		String rNumber = null;
		String nName   = null;
		
		// 내용저장
		FileWriter fw = null;
		File dir = null;
		File log = null;
		
		// 대화내용 저장(yyyy-MM-dd)
		SimpleDateFormat dateFormat = null;
		Calendar ca = null;
				
		try { // 메인에 연결
			System.out.println("== ChatClient START ==");
			infoSocket = new Socket();
			infoSocket.connect(new InetSocketAddress(IP, infoServerPort));

			// infoSocket(4000)에서 입출력을 받는다
			in = new BufferedReader(new InputStreamReader(infoSocket.getInputStream()));
			out = new BufferedWriter(new OutputStreamWriter(infoSocket.getOutputStream()));

			out.write("port_list");
			out.write("\n");
			out.flush();
			
			String temp;
			if((temp = in.readLine() ) != null){
				System.out.println(temp);
			}
			
			if(!infoSocket.isClosed())infoSocket.close();
			if(out != null)out.close();
			if(in != null)in.close();
			// info socket close
			
			
			input= new Scanner(System.in);

			while(true) {
				//방번호 입력
				System.out.println("방번호 입력>>");
				rNumber = input.nextLine();
				
				//방번호 유효성 확인 하기 
				
				List<String> list = new ArrayList<String>();
				list.add("8000");
				list.add("8001");
				list.add("8002");
				list.add("8003");
				list.add("8004");
				list.add("8005");
				list.add("8006");
				list.add("8007");
				list.add("8008");
				list.add("8009");
				
				JSONArray arr = new JSONArray();
				for(int i = 0; i<list.size(); i++) {
					arr.put(list.get(i));
				}
				
				while(!list.contains(rNumber)) {
					System.out.println("입력하신 방번호는 유효하지 않습니다. 다시 입력해주세요");
					System.out.print("방번호 입력>>");
					rNumber = input.nextLine();
				}
				
				//닉네임 입력
				System.out.println("닉네임 입력>>");
				nName = input.nextLine();
				if(rNumber.isEmpty() == false && nName.isEmpty() == false) {
					break;
				}
			}
			
			System.out.println("방번호 입력: "+rNumber+" 입니다.");			
			System.out.println("닉네임 입력: "+nName  +" 입니다.");
			
			// 소켓 연결
			chatSocket = new Socket();
			chatSocket.connect(new InetSocketAddress(IP, Integer.parseInt(rNumber))); // String→Integer
			
			out = new BufferedWriter(new OutputStreamWriter(chatSocket.getOutputStream()));
			in = new BufferedReader(new InputStreamReader(chatSocket.getInputStream()));
			
			if((temp = in.readLine() ) != null){
				System.out.println(temp);				
			}
			
			Output output = new Output(chatSocket,nName); // 매개변수 소켓명과 이름
            output.start();
            
            String readValue;
            
            // 타이틀을 날자로 지정하여 파일 저장하는 방법
            dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date time = new Date();
            String today = dateFormat.format(time);
            Date selectDate = dateFormat.parse(today);
            ca = new GregorianCalendar(Locale.JAPAN);
            ca.setTime(time);
            today = dateFormat.format(ca.getTime());
            
            String fileName = today + "_" + rNumber + ".txt"; // 파일이름
            String dirAddress = "C:/Temp/chat/" + fileName + ".txt"; // 폴더주소
            // 끝
            
			while((readValue = in.readLine()) != null ) {
				System.out.println(readValue);
				
				dir = new File("C:/Temp/chat"); // 폴더
				if(dir.exists() == false) { // 폴더가 없다면
					dir.mkdirs(); // 생성
				}
				log = new File(dirAddress); // 파일
            	if(log.exists() == false) { // 파일이 없다면
        			log.createNewFile(); // 생성
        		}
            	fw = new FileWriter(log, true); // true로 설정하여 다음 줄에 쓰도록 하기
				fw.write(readValue + "\r\n");
				fw.flush();
			}
		} catch (ConnectException e) {
			System.out.println(e);
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try { // close
				if(fw != null) fw.close();
				if(input != null)input.close();
				if(out != null)out.close();
				if(in != null)in.close();
				if(!infoSocket.isClosed())infoSocket.close();
				if(!chatSocket.isClosed())chatSocket.close();
			}catch (IOException e) {
			}
			System.out.println("== ChatClient END ==");
			System.exit(0);
		}
	}
}

class Output extends Thread{
	BufferedReader in;
	PrintWriter out;
	Socket socket;
	String name;
	
	PrintWriter pw = null;
	FileWriter fw = null;
	File log = null;
	
	Output(Socket socket,String name){
        this.socket=socket;
        this.name = name;
        try {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())));
        } catch (IOException e) {
            System.out.println("aa");
            Output.interrupted();
        }
    }
	
    public void run() {
        String data;
        while(true) {
            try {
                //키보드로부터 입력
            	System.out.print(">");
                data = in.readLine();
                data = "["+name+"] "+data;
                out.println(data);//서버로 데이터 전송
                out.flush();
                
                if(data.equals("exit") || socket.isClosed()){
                	socket.isClosed();
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
        System.out.println("서버와 연결 종료 Output 쓰레드 종료");
        try {
            in.close();
            out.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
